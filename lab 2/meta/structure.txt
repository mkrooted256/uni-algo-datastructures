/sorting.jl               # Основний файл із кодом
- function bubblesort!(v::Vector{T})
    Сортування вектору v алгоритмом бульбашки.
    Приймає вектори будь-якого типу, який підтримує порівняння
    Повертає кортеж (cmps, swaps)

- function quicksort!(v::Vector{T}, pretty=false, pivoter::Function=((v, lo, hi)->fld(lo+hi, 2)))
    Сортування вектору v алгоритмом швидкого сортування
    Приймає вектор (аналогічно bubblesort!), флаг для увімкнення покрокового виводу стану алгоритма,
      та функцію, що обирає pivot-елемент підмасиву. За замовчуванням, обирається серединний
      елемент підмасиву
    Повертає кортеж (cmps, swaps)

  - function divide!(v::Vector{T}, lo, hi, pivoter::Function)
      "Worker"-функція, що власне займається вибором pivot-елементу та обміном інверсій.
      Приймає весь(!) сортований вектор, індекси початку та кінця підмасиву, який необхідно
        відсортувати, та функцію, що обирає pivot-елемент
      Повертає індекс точки нового розбиття
  - function divide_pretty!
      Аналогічно divide!, але кожну ітерацію виводить в stdout інформацію про стан алгоритма

- function generate_report()
    Функція для тестування швидкодії алгоритмів. Запускає обидва алгоритма Samples разів для
      кожної довжини випадкового вхідного вектору з списку evenNs, а потім oddNs
    Результат записується в файл mk-sorting-report.csv

    - function report_algo(label, Ns, Samples, algo::Function)
        Функція, що виконує всю роботу. Приймає назву тесту, список розмірів вхідного вектору,
          кількість повторів кожного підтесту та власне саму функцію, що реалізує алгоритм.
        Повертає DataFrame із даними про кількість тестів та кількостями обмінів і порівнянь
          для кожного тесту
